{"version":3,"sources":["components/Search.js","components/Imagen.js","components/ListImage.js","components/ButtonsOptions.js","components/Navbar.js","App.js","serviceWorker.js","index.js","img/logo-pin.png","img/bell1.svg","img/chat1.svg","img/dot.svg"],"names":["Search","guardarBusqueda","useState","terminoBusqueda","guardarTerminoBusqueda","guardarError","onSubmit","e","preventDefault","className","placeholder","type","onChange","target","value","Imagen","imagen","previewURL","tags","src","alt","ListImage","imagenes","map","key","id","ButtonsOptions","Navbar","busqueda","guardarImagenes","useEffect","a","url","fetch","respuesta","json","resultado","hits","consultarApi","href","Logo","Chat","Bell","Dots","dataLength","length","next","hasMore","loader","endMessage","style","textAlign","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.97ddec1c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Search.css\";\r\n\r\nfunction Search({ guardarBusqueda }) {\r\n  const [terminoBusqueda, guardarTerminoBusqueda] = useState(\"\");\r\n\r\n  const [error, guardarError] = useState(false);\r\n\r\n  const buscarImagen = e => {\r\n    e.preventDefault();\r\n\r\n    //validar\r\n\r\n    if (terminoBusqueda === \"\") {\r\n      guardarError(true);\r\n      return;\r\n    }\r\n    //Enviar el termino hacia el componente principal\r\n    guardarError(false);\r\n    guardarBusqueda(terminoBusqueda);\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={buscarImagen}\r\n      //accion para mandar el dato capturado\r\n    >\r\n      <div className=\"content-input border-search\">\r\n        <div>\r\n          <i className=\"   glyphicon glyphicon-search  w3-large \"></i>\r\n        </div>\r\n        <input\r\n          className=\"input-search color-text\"\r\n          placeholder=\"Buscar\"\r\n          type=\"text\"\r\n          // el cambio que se genera\r\n          onChange={e => guardarTerminoBusqueda(e.target.value)}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport \"./imagen.css\";\r\n\r\nconst Imagen = ({ imagen }) => {\r\n  const { previewURL, tags } = imagen;\r\n\r\n  return (\r\n    <div className=\"content-img\">\r\n      <img src={previewURL} alt={tags} className=\"images-list\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Imagen;\r\n","import React from \"react\";\r\nimport Imagen from \"./Imagen\";\r\nimport \"./ListImage.css\";\r\n\r\nfunction ListImage({ imagenes }) {\r\n  return (\r\n    <div className=\"content-images\">\r\n      {imagenes.map(imagen => (\r\n        <Imagen key={imagen.id} imagen={imagen} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListImage;\r\n","import React from \"react\";\r\nimport \"./buttonsOptions.css\";\r\n\r\nconst ButtonsOptions = () => {\r\n  return (\r\n    <section className=\"footer\">\r\n      <div>\r\n        <button className=\"btn-plus\">\r\n          <i className=\"glyphicon glyphicon-plus\"></i>\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <button className=\"btn-question\">\r\n          <i className=\" \tglyphicon glyphicon-question-sign\"></i>\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default ButtonsOptions;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Navbar.css\";\r\nimport Search from \"./Search\";\r\nimport ListImage from \"./ListImage\";\r\nimport Logo from \"../img/logo-pin.png\";\r\nimport Bell from \"../img/bell1.svg\";\r\nimport Chat from \"../img/chat1.svg\";\r\nimport Dots from \"../img/dot.svg\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Masonry from \"react-masonry-component\";\r\nimport ButtonsOptions from \"./ButtonsOptions\";\r\n\r\nfunction Navbar() {\r\n  const [busqueda, guardarBusqueda] = useState(\"pasos\");\r\n  const [imagenes, guardarImagenes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const consultarApi = async () => {\r\n      if (busqueda === \"\") return;\r\n\r\n      const imagenesPorPagina = 20;\r\n      const key = \"13914263-0b302888b20136cdbe03baab4\";\r\n\r\n      const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}`;\r\n\r\n      const respuesta = await fetch(url);\r\n      const resultado = await respuesta.json();\r\n\r\n      guardarImagenes(resultado.hits);\r\n    };\r\n    consultarApi();\r\n  }, [busqueda]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <nav className=\"navbar\">\r\n        <div className=\"content-icon\">\r\n          <div>\r\n            <div className=\"content-input\">\r\n              <a href=\"index.html\">\r\n                <img className=\"logo\" src={Logo} alt=\"Logo\" />\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Search guardarBusqueda={guardarBusqueda} />\r\n        <div className=\"second-content\">\r\n          <div className=\"color-text navtext\" id=\"Init\">\r\n            Inicio\r\n          </div>\r\n          <div className=\"color-text navtext\">Siguiendo</div>\r\n          <div className=\"color-text navtext\">\r\n            <div className=\"btn-user\">\r\n              <div className=\"userPic\">A</div>\r\n              <div className=\"userName\">Alebea</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"border-separator padding-navtext\"></div>\r\n          <div className=\"content-iconright\">\r\n            <i className=\"fas fa-comment-dots\"></i>\r\n            <img src={Chat} alt=\"message\" />\r\n          </div>\r\n          <div className=\"content-iconright\">\r\n            <i className=\"fas fa-bell\"></i>\r\n            <img src={Bell} alt=\"news\" />\r\n          </div>\r\n          <div className=\"content-iconright\">\r\n            <i className=\"fas fa-ellipsis-h\"></i>\r\n            <img src={Dots} alt=\"add\" />\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <InfiniteScroll\r\n        dataLength={imagenes.length}\r\n        next={useEffect.consultarApi}\r\n        hasMore={true}\r\n        loader={<h4> ... Loading ...</h4>}\r\n        endMessage={\r\n          <p style={{ textAlign: \"center\" }}>\r\n            <b>Yay! You have seen it all</b>\r\n          </p>\r\n        }\r\n      >\r\n        <Masonry>\r\n          <ListImage imagenes={imagenes} />\r\n        </Masonry>\r\n      </InfiniteScroll>\r\n      <ButtonsOptions />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <Navbar />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo-pin.6de1742d.png\";","module.exports = __webpack_public_path__ + \"static/media/bell1.638b8cdc.svg\";","module.exports = __webpack_public_path__ + \"static/media/chat1.46debb6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/dot.9da64eda.svg\";"],"sourceRoot":""}