{"version":3,"sources":["components/Search.js","components/Imagen.js","components/ListImage.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Search","guardarBusqueda","useState","terminoBusqueda","guardarTerminoBusqueda","guardarError","onSubmit","e","preventDefault","className","placeholder","type","onChange","target","value","Imagen","imagen","previewURL","tags","src","alt","ListImage","imagenes","map","key","id","Navbar","busqueda","guardarImagenes","useEffect","a","url","fetch","respuesta","json","resultado","hits","consultarApi","href","border","style","color","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVA0CeA,MAxCf,YAAsC,IAApBC,EAAmB,EAAnBA,gBAAmB,EACeC,mBAAS,IADxB,mBAC5BC,EAD4B,KACXC,EADW,OAGLF,oBAAS,GAHJ,mBAGrBG,GAHqB,WAmBnC,OACE,0BACEC,SAhBiB,SAAAC,GACnBA,EAAEC,iBAIsB,KAApBL,GAKJE,GAAa,GACbJ,EAAgBE,IALdE,GAAa,KAab,yBAAKI,UAAU,+BACb,6BACE,uBAAGA,UAAU,mBAEf,2BACEA,UAAU,0BACVC,YAAY,SACZC,KAAK,OAELC,SAAU,SAAAL,GAAC,OAAIH,EAAuBG,EAAEM,OAAOC,aCrB1CC,EAZA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACRC,EAAqBD,EAArBC,WAAYC,EAASF,EAATE,KAEpB,OACE,yBAAKT,UAAU,kCACb,yBAAKA,UAAU,QACb,yBAAKU,IAAKF,EAAYG,IAAKF,EAAMT,UAAU,oBCKpCY,MAVf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OACE,yBAAKb,UAAU,kBACZa,EAASC,KAAI,SAAAP,GAAM,OAClB,kBAAC,EAAD,CAAQQ,IAAKR,EAAOS,GAAIT,OAAQA,SCkEzBU,MApEf,WAAmB,IAAD,EACoBxB,mBAAS,IAD7B,mBACTyB,EADS,KACC1B,EADD,OAEoBC,mBAAS,IAF7B,mBAEToB,EAFS,KAECM,EAFD,KAqBhB,OAjBAC,qBAAU,YACU,uCAAG,gCAAAC,EAAA,yDACF,KAAbH,EADe,wDAGO,GACd,qCAENI,EANa,uCAIP,qCAJO,cAMkCJ,EANlC,qBAGO,IAHP,SAQKK,MAAMD,GARX,cAQbE,EARa,iBASKA,EAAUC,OATf,QASbC,EATa,OAWnBP,EAAgBO,EAAUC,MAXP,4CAAH,qDAalBC,KACC,CAACV,IAGF,yBAAKlB,UAAU,UACb,yBAAKA,UAAU,gBACb,6BACE,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,kBACb,uBAAG6B,KAAK,IACN,yBACE7B,UAAU,OACVU,IAAI,uCACJC,IAAI,iBACJmB,OAAO,UAMjB,kBAAC,EAAD,CAAQtC,gBAAiBA,IACzB,yBAAKQ,UAAU,kBACb,yBAAKA,UAAU,qBAAqB+B,MAAO,CAAEC,MAAO,YAApD,UAGA,yBAAKhC,UAAU,sBAAf,aACA,yBAAKA,UAAU,sCACb,6BACE,uBAAGA,UAAU,wBAEf,wCAEF,yBAAKA,UAAU,qCACf,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,yBAEf,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,iBAEf,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,uBAEf,+BAGF,kBAAC,EAAD,CAAWa,SAAUA,MCpDZoB,G,uLAVX,OACE,yBAAKjC,UAAU,OACb,gCACE,kBAAC,EAAD,Y,GALQkC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.443fad9e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Search({ guardarBusqueda }) {\r\n  const [terminoBusqueda, guardarTerminoBusqueda] = useState(\"\");\r\n\r\n  const [error, guardarError] = useState(false);\r\n\r\n  const buscarImagen = e => {\r\n    e.preventDefault();\r\n\r\n    //validar\r\n\r\n    if (terminoBusqueda === \"\") {\r\n      guardarError(true);\r\n      return;\r\n    }\r\n    //Enviar el termino hacia el componente principal\r\n    guardarError(false);\r\n    guardarBusqueda(terminoBusqueda);\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={buscarImagen}\r\n      //accion para mandar el dato capturado\r\n    >\r\n      <div className=\"content-input border-search\">\r\n        <div>\r\n          <i className=\"fas fa-search\"></i>\r\n        </div>\r\n        <input\r\n          className=\"input-search color-text\"\r\n          placeholder=\"Buscar\"\r\n          type=\"text\"\r\n          // el cambio que se genera\r\n          onChange={e => guardarTerminoBusqueda(e.target.value)}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Imagen = ({ imagen }) => {\r\n  const { previewURL, tags } = imagen;\r\n\r\n  return (\r\n    <div className=\"col-12  col-md-3 col-lg-3 mb-4\">\r\n      <div className=\"card\">\r\n        <img src={previewURL} alt={tags} className=\"card-img-top\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Imagen;\r\n","import React from \"react\";\r\nimport Imagen from \"./Imagen\";\r\n\r\nfunction ListImage({ imagenes }) {\r\n  return (\r\n    <div className=\"col-12 p-5 row\">\r\n      {imagenes.map(imagen => (\r\n        <Imagen key={imagen.id} imagen={imagen} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListImage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Navbar.css\";\r\nimport Search from \"./Search\";\r\nimport ListImage from \"./ListImage\";\r\n\r\nfunction Navbar() {\r\n  const [busqueda, guardarBusqueda] = useState(\"\");\r\n  const [imagenes, guardarImagenes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const consultarApi = async () => {\r\n      if (busqueda === \"\") return;\r\n\r\n      const imagenesPorPagina = 20;\r\n      const key = \"13914263-0b302888b20136cdbe03baab4\";\r\n\r\n      const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}`;\r\n\r\n      const respuesta = await fetch(url);\r\n      const resultado = await respuesta.json();\r\n\r\n      guardarImagenes(resultado.hits);\r\n    };\r\n    consultarApi();\r\n  }, [busqueda]);\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"content-icon\">\r\n        <div>\r\n          <div className=\"content-input\">\r\n            <i className=\"fas fa-search\"></i>\r\n            <a href=\"\">\r\n              <img\r\n                className=\"logo\"\r\n                src=\"https://i.ibb.co/r4t0P6N/unnamed.png\"\r\n                alt=\"logo pinterest\"\r\n                border=\"0\"\r\n              ></img>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Search guardarBusqueda={guardarBusqueda} />\r\n      <div className=\"second-content\">\r\n        <div className=\"color-text navtext\" style={{ color: \"#262626\" }}>\r\n          Inicio\r\n        </div>\r\n        <div className=\"color-text navtext\">Siguiendo</div>\r\n        <div className=\"content-profile navtext color-text\">\r\n          <div>\r\n            <i className=\"fas fa-user-circle\"></i>\r\n          </div>\r\n          <div>AleBea</div>\r\n        </div>\r\n        <div className=\"border-separator padding-navtext\"></div>\r\n        <div className=\"content-iconright\">\r\n          <i className=\"fas fa-comment-dots\"></i>\r\n        </div>\r\n        <div className=\"content-iconright\">\r\n          <i className=\"fas fa-bell\"></i>\r\n        </div>\r\n        <div className=\"content-iconright\">\r\n          <i className=\"fas fa-ellipsis-h\"></i>\r\n        </div>\r\n        <div></div>\r\n      </div>\r\n\r\n      <ListImage imagenes={imagenes} />\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <Navbar />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}